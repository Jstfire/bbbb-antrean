"use client";

import { useState, useEffect } from "react";
import { useSession } from "next-auth/react";
import { toast } from "sonner";
import {
    Card,
    CardContent,
    CardDescription,
    CardHeader,
    CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { QueueStatus, Role } from "@/generated/prisma";
import { formatDistance } from "date-fns";
import { id } from "date-fns/locale";
import {
    Dialog,
    DialogContent,
    DialogFooter,
    DialogHeader,
    DialogTitle,
} from "@/components/ui/dialog";
import { Smartphone, MessageSquareText } from "lucide-react";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";

interface Queue {
    id: string;
    queueNumber: number;
    status: QueueStatus;
    createdAt: string;
    startTime: string | null;
    endTime: string | null;
    filledSKD: boolean;
    trackingLink: string | null;
    tempUuid: string | null;
    visitor: {
        name: string;
        phone: string;
        institution: string | null;
    };
    service: {
        name: string;
    };
    admin: {
        name: string;
    } | null;
}

export default function QueueManagementPage() {
    const { data: session } = useSession();
    const [queues, setQueues] = useState<Queue[]>([]);
    const [activeTab, setActiveTab] = useState<QueueStatus>("WAITING");
    const [loading, setLoading] = useState(true);
    const [showContinueDialog, setShowContinueDialog] = useState(false);
    const [nextInQueue, setNextInQueue] = useState<Queue | null>(null);
    const [showRemindSkdDialog, setShowRemindSkdDialog] = useState(false);
    const [selectedQueue, setSelectedQueue] = useState<Queue | null>(null);
    const [reminderMessage, setReminderMessage] = useState("");
    const [isSendingReminder, setIsSendingReminder] = useState(false);

    useEffect(() => {
        fetchQueues(activeTab);

        // Refresh queue list every 10 seconds for more real-time updates
        const interval = setInterval(() => {
            fetchQueues(activeTab);
        }, 10000);

        return () => clearInterval(interval);
    }, [activeTab]);

    const fetchQueues = async (status: QueueStatus) => {
        try {
            setLoading(true);
            const response = await fetch(`/api/queue?status=${status}`);
            if (response.ok) {
                const data = await response.json();
                setQueues(data.queues);
            } else {
                toast.error("Gagal memuat daftar antrean");
            }
        } catch (error) {
            console.error("Error fetching queues:", error);
            toast.error("Terjadi kesalahan saat memuat antrean");
        } finally {
            setLoading(false);
        }
    };

    const handleServeQueue = async (queueId: string) => {
        try {
            const response = await fetch(`/api/queue/${queueId}/serve`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                }
            });

            if (response.ok) {
                toast.success("Antrean sedang dilayani");
                fetchQueues(activeTab);
            } else {
                const data = await response.json();
                toast.error(data.error || "Gagal memulai pelayanan antrean");
            }
        } catch (error) {
            console.error("Error serving queue:", error);
            toast.error("Terjadi kesalahan");
        }
    };

    const handleCompleteQueue = async (queueId: string) => {
        try {
            const response = await fetch(`/api/queue/${queueId}/complete`, {
                method: "POST",
            });

            if (response.ok) {
                toast.success("Antrean telah selesai dilayani");

                // Check if there are waiting customers to offer continuing service
                const waitingResponse = await fetch(`/api/queue?status=WAITING`);
                if (waitingResponse.ok) {
                    const data = await waitingResponse.json();
                    if (data.queues.length > 0) {
                        // Get the next customer in queue (first waiting)
                        const nextCustomer = data.queues[0];
                        setNextInQueue(nextCustomer);
                        setShowContinueDialog(true);
                    }
                }

                fetchQueues(activeTab);
            } else {
                const data = await response.json();
                toast.error(data.error || "Gagal menyelesaikan antrean");
            }
        } catch (error) {
            console.error("Error completing queue:", error);
            toast.error("Terjadi kesalahan");
        }
    };

    const handleCancelQueue = async (queueId: string) => {
        try {
            const response = await fetch(`/api/queue/${queueId}/cancel`, {
                method: "POST",
            });

            if (response.ok) {
                toast.success("Antrean telah dibatalkan");
                fetchQueues(activeTab);
            } else {
                const data = await response.json();
                toast.error(data.error || "Gagal membatalkan antrean");
            }
        } catch (error) {
            console.error("Error canceling queue:", error);
            toast.error("Terjadi kesalahan");
        }
    };

    const getWaitingTime = (createdAt: string) => {
        try {
            return formatDistance(new Date(createdAt), new Date(), {
                addSuffix: false,
                locale: id,
            });
        } catch (error) {
            console.log("Error formatting date:", error);

            return "-";
        }
    };

    // Function to handle opening the SKD reminder dialog
    const handleRemindSKD = (queue: Queue) => {
        setSelectedQueue(queue);
        setReminderMessage(`Halo ${queue.visitor.name}, mohon kesediaannya untuk mengisi survei kepuasan pelanggan (SKD2025) BPS Buton Selatan melalui link berikut: ${window.location.origin}/visitor-form/${queue.tempUuid}`);
        setShowRemindSkdDialog(true);
    };

    // Function to prepare WhatsApp message
    const prepareWhatsAppReminder = async () => {
        if (!selectedQueue) return;

        try {
            setIsSendingReminder(true);

            const response = await fetch(`/api/queue/${selectedQueue.id}/remind-skd`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    message: reminderMessage,
                }),
            });
            if (response.ok) {
                const data = await response.json();
                window.open(data.data.whatsappUrl, "_blank");
                toast.success("Pengingat SKD berhasil disiapkan");
                setShowRemindSkdDialog(false);
                fetchQueues(activeTab);
            } else {
                const errorData = await response.json();
                toast.error(errorData.error || "Gagal menyiapkan pengingat SKD");
            }
        } catch (error) {
            console.error("Error preparing SKD reminder:", error);
            toast.error("Terjadi kesalahan saat menyiapkan pengingat SKD");
        } finally {
            setIsSendingReminder(false);
        }
    };

    // Function to handle SKD check
    const handleMarkSkdFilled = async (queue: Queue, filled: boolean) => {
        try {
            if (!queue.tempUuid) return;

            const response = await fetch(`/api/visitor-form/skd`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    tempUuid: queue.tempUuid,
                    filled: filled,
                }),
            });

            if (response.ok) {
                toast.success(filled ? "SKD ditandai telah diisi" : "SKD ditandai belum diisi");
                fetchQueues(activeTab);
            } else {
                const errorData = await response.json();
                toast.error(errorData.error || "Gagal mengubah status SKD");
            }
        } catch (error) {
            console.error("Error updating SKD status:", error);
            toast.error("Terjadi kesalahan saat mengubah status SKD");
        }
    };

    const getActionButtons = (queue: Queue) => {
        const isSuperAdmin = session?.user?.role === Role.SUPERADMIN;
        const actions = [];

        // Add "Remind SKD" button for queues that haven't filled SKD
        if (!queue.filledSKD && queue.tempUuid) {
            actions.push(
                <Button
                    key="remind-skd"
                    size="sm"
                    variant="outline"
                    className="flex items-center gap-1"
                    onClick={() => handleRemindSKD(queue)}
                >
                    <Smartphone className="w-3 h-3" />
                    <span>Kirim Pengingat</span>
                </Button>
            );
        }

        // Add standard action buttons based on queue status
        switch (queue.status) {
            case "WAITING":
                actions.push(
                    <Button
                        key="serve"
                        size="sm"
                        onClick={() => handleServeQueue(queue.id)}
                    >
                        Layani
                    </Button>,
                    <Button
                        key="cancel"
                        size="sm"
                        variant="destructive"
                        onClick={() => handleCancelQueue(queue.id)}
                    >
                        Batalkan
                    </Button>
                );
                break;
            case "SERVING":
                // Only show complete button if the current admin is serving this queue or is superadmin
                if (
                    isSuperAdmin ||
                    (queue.admin && queue.admin.name === session?.user?.name)
                ) {
                    actions.push(
                        <Button
                            key="complete"
                            size="sm"
                            onClick={() => handleCompleteQueue(queue.id)}
                        >
                            Selesai
                        </Button>
                    );
                } else {
                    actions.push(
                        <span key="serving-info">Sedang dilayani oleh {queue.admin?.name}</span>
                    );
                }
                break;
            default:
                break;
        }

        return <div className="flex flex-wrap justify-end gap-2">{actions}</div>;
    };

    const getTableColumns = () => (
        <>
            <TableHead className="w-16">No</TableHead>
            <TableHead>Nama</TableHead>
            <TableHead>Layanan</TableHead>
            <TableHead>Waktu</TableHead>
            <TableHead>Status SKD</TableHead>
            <TableHead>Link Tracking</TableHead>
            <TableHead className="text-right">Aksi</TableHead>
        </>
    );

    // Function to render queue rows
    const renderQueueRow = (queue: Queue) => (
        <TableRow key={queue.id}>
            <TableCell className="font-medium">{queue.queueNumber}</TableCell>
            <TableCell>
                <div>
                    <p>{queue.visitor.name}</p>
                    <p className="text-muted-foreground text-xs">{queue.visitor.institution || "-"}</p>
                    <p className="text-muted-foreground text-xs">{queue.visitor.phone}</p>
                </div>
            </TableCell>
            <TableCell>{queue.service.name}</TableCell>
            <TableCell>
                <div>
                    <p className="text-muted-foreground text-xs">{getWaitingTime(queue.createdAt)}</p>
                </div>
            </TableCell>
            <TableCell>
                {queue.filledSKD ? (
                    <div className="flex items-center space-x-2">
                        <span className="inline-flex items-center bg-green-50 px-2 py-1 rounded-full ring-1 ring-green-600/20 ring-inset font-medium text-green-700 text-xs">
                            Sudah Diisi
                        </span>
                        <Button
                            variant="ghost"
                            size="sm"
                            className="h-6 text-xs"
                            onClick={() => handleMarkSkdFilled(queue, false)}
                        >
                            Tandai Belum
                        </Button>
                    </div>
                ) : (
                    <div className="flex items-center space-x-2">
                        <span className="inline-flex items-center bg-red-50 px-2 py-1 rounded-full ring-1 ring-red-600/20 ring-inset font-medium text-red-700 text-xs">
                            Belum Diisi
                        </span>
                        <Button
                            variant="ghost"
                            size="sm"
                            className="h-6 text-xs"
                            onClick={() => handleMarkSkdFilled(queue, true)}
                        >
                            Tandai Sudah
                        </Button>
                    </div>
                )}
            </TableCell>
            <TableCell>
                {queue.trackingLink ? (
                    <Button
                        variant="outline"
                        size="sm"
                        className="h-8 text-xs"
                        onClick={() => {
                            // Copy to clipboard
                            navigator.clipboard.writeText(
                                `${window.location.origin}/visitor-form/${queue.tempUuid}`
                            );
                            toast.success("Link tracking disalin ke clipboard");
                        }}
                    >
                        Salin Link
                    </Button>
                ) : (
                    <span className="text-muted-foreground text-xs">-</span>
                )}
            </TableCell>
            <TableCell className="text-right">
                {getActionButtons(queue)}
            </TableCell>
        </TableRow>
    );

    return (
        <div className="space-y-4 p-4">
            <div className="flex justify-between items-center">
                <h1 className="font-bold text-xl">Manajemen Antrean</h1>
                <Button
                    size="sm"
                    onClick={() => fetchQueues(activeTab)}
                    disabled={loading}
                >
                    Refresh
                </Button>
            </div>

            <Tabs
                defaultValue="WAITING"
                value={activeTab}
                onValueChange={(value) => setActiveTab(value as QueueStatus)}
            >
                <TabsList>
                    <TabsTrigger value="WAITING">Menunggu</TabsTrigger>
                    <TabsTrigger value="SERVING">Sedang Dilayani</TabsTrigger>
                    <TabsTrigger value="COMPLETED">Selesai</TabsTrigger>
                    <TabsTrigger value="CANCELED">Dibatalkan</TabsTrigger>
                </TabsList>

                <TabsContent value={activeTab}>
                    <Card>
                        <CardHeader>
                            <CardTitle>
                                Antrean dengan Status:{" "}
                                {activeTab === "WAITING"
                                    ? "Menunggu"
                                    : activeTab === "SERVING"
                                        ? "Sedang Dilayani"
                                        : activeTab === "COMPLETED"
                                            ? "Selesai"
                                            : "Dibatalkan"}
                            </CardTitle>
                            <CardDescription>
                                {activeTab === "WAITING"
                                    ? "Daftar pengunjung yang sedang menunggu antrean"
                                    : activeTab === "SERVING"
                                        ? "Daftar pengunjung yang sedang dilayani"
                                        : activeTab === "COMPLETED"
                                            ? "Daftar pengunjung yang telah selesai dilayani"
                                            : "Daftar antrean yang dibatalkan"}
                            </CardDescription>
                        </CardHeader>
                        <CardContent>
                            {loading ? (
                                <div className="flex justify-center py-8">
                                    <p>Memuat data...</p>
                                </div>
                            ) : queues.length > 0 ? (
                                <Table>
                                    <TableHeader>
                                        <TableRow>{getTableColumns()}</TableRow>
                                    </TableHeader>
                                    <TableBody>
                                        {queues.map(renderQueueRow)}
                                    </TableBody>
                                </Table>
                            ) : (
                                <div className="flex justify-center py-8">
                                    <p>Belum ada data antrean</p>
                                </div>
                            )}
                        </CardContent>
                    </Card>
                </TabsContent>
            </Tabs>

            <Dialog open={showContinueDialog} onOpenChange={setShowContinueDialog}>
                <DialogContent>
                    <DialogHeader>
                        <DialogTitle>Lanjut ke Pengunjung Berikutnya?</DialogTitle>
                    </DialogHeader>
                    <div className="py-4">
                        {nextInQueue && (
                            <div className="space-y-2">
                                <p>
                                    Pengunjung berikutnya:{" "}
                                    <strong>{nextInQueue.visitor.name}</strong>
                                </p>
                                <p>
                                    Nomor Antrean:{" "}
                                    <strong>{nextInQueue.queueNumber}</strong>
                                </p>
                                <p>
                                    Layanan:{" "}
                                    <strong>{nextInQueue.service.name}</strong>
                                </p>
                            </div>
                        )}
                    </div>
                    <DialogFooter className="flex justify-end space-x-2">
                        <Button
                            variant="outline"
                            onClick={() => setShowContinueDialog(false)}
                        >
                            Nanti Saja
                        </Button>
                        <Button
                            onClick={() => {
                                if (nextInQueue) {
                                    handleServeQueue(nextInQueue.id);
                                    setShowContinueDialog(false);
                                }
                            }}
                        >
                            Ya, Layani Sekarang
                        </Button>
                    </DialogFooter>
                </DialogContent>
            </Dialog>

            {/* Add SKD Reminder Dialog */}
            <Dialog open={showRemindSkdDialog} onOpenChange={setShowRemindSkdDialog}>
                <DialogContent>
                    <DialogHeader>
                        <DialogTitle>Kirim Pengingat SKD</DialogTitle>
                    </DialogHeader>
                    <div className="space-y-4 py-4">
                        {selectedQueue && (
                            <>
                                <div className="space-y-2">
                                    <p>
                                        Pengunjung: <strong>{selectedQueue.visitor.name}</strong>
                                    </p>
                                    <p>
                                        No. HP: <strong>{selectedQueue.visitor.phone}</strong>
                                    </p>
                                </div>

                                <div className="space-y-2">
                                    <Label htmlFor="reminder-message">Pesan Pengingat:</Label>
                                    <Textarea
                                        id="reminder-message"
                                        value={reminderMessage}
                                        onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => setReminderMessage(e.target.value)}
                                        rows={4}
                                        className="resize-none"
                                        placeholder="Ketik pesan di sini..."
                                    />
                                </div>
                            </>
                        )}
                    </div>
                    <DialogFooter className="flex justify-end space-x-2">
                        <Button
                            variant="outline"
                            onClick={() => setShowRemindSkdDialog(false)}
                        >
                            Batal
                        </Button>
                        <Button
                            onClick={prepareWhatsAppReminder}
                            disabled={isSendingReminder}
                            className="gap-2"
                        >
                            <MessageSquareText className="w-4 h-4" />
                            Kirim via WhatsApp
                        </Button>
                    </DialogFooter>
                </DialogContent>
            </Dialog>
        </div>
    );
}
